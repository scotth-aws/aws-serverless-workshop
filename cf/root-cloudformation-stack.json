{
  "Description": "Root Stack for AWS Amplify CLI",
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "AuthRoleName": {
      "Type": "String",
      "Default": "vodAuthRoleName",
      "Description": " AuthRole used by Cognito"
    },
    "UnauthRoleName": {
      "Type": "String",
      "Default": "vodUnAuthRoleName",
      "Description": "UnAuthRole used by Cognito"
    },
    "DeploymentBucketName": {
      "Type": "String",
      "Default": "some-bucket-dev-deployment",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9-_]*",
      "Description": "Name of the  deployment bucket with the parent stack uploaded"
    }
  },
  "Outputs": {
    "Region": {
      "Description": "CloudFormation provider root stack Region",
      "Value": {
        "Ref": "AWS::Region"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Region"
        }
      }
    },
    "StackName": {
      "Description": "CloudFormation provider root stack ID",
      "Value": {
        "Ref": "AWS::StackName"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-StackName"
        }
      }
    },
    "StackId": {
      "Description": "CloudFormation provider root stack name",
      "Value": {
        "Ref": "AWS::StackId"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-StackId"
        }
      }
    },
    "AuthRoleArn": {
      "Value": {
        "Fn::GetAtt": [
          "AuthRole",
          "Arn"
        ]
      }
    },
    "UnauthRoleArn": {
      "Value": {
        "Fn::GetAtt": [
          "UnauthRole",
          "Arn"
        ]
      }
    },
    "AuthRoleName": {
      "Value": {
        "Ref": "AuthRole"
      }
    },
    "UnauthRoleName": {
      "Value": {
        "Ref": "UnauthRole"
      }
    }
  },
  "Resources": {
    "AuthRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Deny",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": "sts:AssumeRoleWithWebIdentity"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "vodS3policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "scotthVodGetS3",
                  "Effect": "Allow",
                  "Action": "s3:GetObject",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::vod-output-bucket",
                        {
                          "Fn::Select": [
                            4,
                            {
                              "Fn::Split": [
                                "-",
                                {
                                  "Fn::Select": [
                                    2,
                                    {
                                      "Fn::Split": [
                                        "/",
                                        {
                                          "Ref": "AWS::StackId"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        "/*"

                      ]
                    ]
                  }
                },
                {
                  "Sid": "scotthVodPutS3",
                  "Effect": "Allow",
                  "Action": "s3:PutObject",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::vod-input-bucket",
                        {
                          "Fn::Select": [
                            4,
                            {
                              "Fn::Split": [
                                "-",
                                {
                                  "Fn::Select": [
                                    2,
                                    {
                                      "Fn::Split": [
                                        "/",
                                        {
                                          "Ref": "AWS::StackId"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        "/*"

                      ]
                    ]
                  }
                }
              ]
            }
          }
        ],
        "RoleName": {
          "Ref": "AuthRoleName"
        }
      }
    },
    "UnauthRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Deny",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": "sts:AssumeRoleWithWebIdentity"
            }
          ]
        },
        "RoleName": {
          "Ref": "UnauthRoleName"
        }
      }
    },
    "authvodscotth133eebea": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://s3.amazonaws.com/",
              {
                "Ref": "DeploymentBucketName"
              },
              "/amplify-cfn-templates/auth/vodscotth133eebea-cloudformation-template.json"
            ]
          ]
        },
        "Parameters": {
          "identityPoolName": "vodscotth133eebea_identitypool_133eebea",
          "allowUnauthenticatedIdentities": false,
          "resourceNameTruncated": "vodsco133eebea",
          "userPoolName": "vodscotth133eebea_userpool_133eebea",
          "autoVerifiedAttributes": "email",
          "mfaConfiguration": "OFF",
          "mfaTypes": "SMS Text Message",
          "smsAuthenticationMessage": "Your authentication code is {####}",
          "smsVerificationMessage": "Your verification code is {####}",
          "emailVerificationSubject": "Your verification code",
          "emailVerificationMessage": "Your verification code is {####}",
          "defaultPasswordPolicy": false,
          "passwordPolicyMinLength": 8,
          "passwordPolicyCharacters": "",
          "requiredAttributes": "email",
          "aliasAttributes": "",
          "userpoolClientGenerateSecret": false,
          "userpoolClientRefreshTokenValidity": 30,
          "userpoolClientWriteAttributes": "email",
          "userpoolClientReadAttributes": "email",
          "userpoolClientLambdaRole": "vodsco133eebea_userpoolclient_lambda_role",
          "userpoolClientSetAttributes": false,
          "sharedId": "133eebea",
          "resourceName": "vodscotth133eebea",
          "authSelections": "identityPoolAndUserPool",
          "useDefault": "default",
          "userPoolGroupList": "",
          "serviceName": "Cognito",
          "usernameCaseSensitive": false,
          "useEnabledMfas": true,
          "authRoleArn": {
            "Fn::GetAtt": [
              "AuthRole",
              "Arn"
            ]
          },
          "unauthRoleArn": {
            "Fn::GetAtt": [
              "UnauthRole",
              "Arn"
            ]
          },
          "breakCircularDependency": true,
          "dependsOn": "",
          "env": "dev"
        }
      }
    },
    "apivodscotth": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://s3.amazonaws.com/",
              {
                "Ref": "DeploymentBucketName"
              },
              "/amplify-cfn-templates/api/cloudformation-template.json"
            ]
          ]
        },
        "Parameters": {
          "AppSyncApiName": "vodscotth",
          "DynamoDBBillingMode": "PAY_PER_REQUEST",
          "DynamoDBEnableServerSideEncryption": false,
          "AuthCognitoUserPoolId": {
            "Fn::GetAtt": [
              "authvodscotth133eebea",
              "Outputs.UserPoolId"
            ]
          },
          "S3DeploymentBucket": {
            "Ref": "DeploymentBucketName"
          },
          "S3DeploymentRootKey": "amplify-appsync-files/6d2c7f3ab3eca9c50564a3e4f4870b77b0c57684",
          "env": "dev"
        }
      }
    },
    "videom1820vodservice": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://s3.amazonaws.com/",
              {
                "Ref": "DeploymentBucketName"
              },
              "/amplify-cfn-templates/video/m1820vodservice-vod-workflow-template.yaml"
            ]
          ]
        },
        "Parameters": {
          "authRoleName": {
            "Ref": "AuthRoleName"
          },
          "GraphQLAPIId": {
            "Fn::GetAtt": [
              "apivodscotth",
              "Outputs.GraphQLAPIIdOutput"
            ]
          },
          "pS3": {
            "Ref": "DeploymentBucketName"
          },
          "GraphQLEndpoint": {
            "Fn::GetAtt": [
              "apivodscotth",
              "Outputs.GraphQLAPIEndpointOutput"
            ]
          },
          "pS3InputName": {
            
              "Fn::Join": [
                "",
                [
                  "vod-input-bucket",
                  {
                    "Fn::Select": [
                      4,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              2,
                              {
                                "Fn::Split": [
                                  "/",
                                  {
                                    "Ref": "AWS::StackId"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              ]
          },
          "pS3OutputName": {
            "Fn::Join": [
              "",
              [
                "vod-output-bucket",
                {
                  "Fn::Select": [
                    4,
                    {
                      "Fn::Split": [
                        "-",
                        {
                          "Fn::Select": [
                            2,
                            {
                              "Fn::Split": [
                                "/",
                                {
                                  "Ref": "AWS::StackId"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          },
          "s3UUID": "n54rfo7m",
          "env": "dev"
        }
      }
    },
    "UpdateRolesWithIDPFunction": {
      "DependsOn": [
        "AuthRole",
        "UnauthRole",
        "authvodscotth133eebea"
      ],
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "const response = require('cfn-response');",
                "const aws = require('aws-sdk');",
                "let responseData = {};",
                "exports.handler = function(event, context) {",
                "  try {",
                "    let authRoleName = event.ResourceProperties.authRoleName;",
                "    let unauthRoleName = event.ResourceProperties.unauthRoleName;",
                "    let idpId = event.ResourceProperties.idpId;",
                "    let promises = [];",
                "    let getPromises = [];",
                "    let authParamsJson = { 'Version': '2012-10-17','Statement': [{'Effect': 'Allow','Principal': {'Federated': 'cognito-identity.amazonaws.com'},'Action': 'sts:AssumeRoleWithWebIdentity','Condition': {'StringEquals': {'cognito-identity.amazonaws.com:aud': idpId},'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'authenticated'}}}]};",
                "    let unauthParamsJson = { 'Version': '2012-10-17','Statement': [{'Effect': 'Allow','Principal': {'Federated': 'cognito-identity.amazonaws.com'},'Action': 'sts:AssumeRoleWithWebIdentity','Condition': {'StringEquals': {'cognito-identity.amazonaws.com:aud': idpId},'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'unauthenticated'}}}]};",
                "    if (event.RequestType == 'Delete') {",
                "        delete authParamsJson.Statement[0].Condition;",
                "        delete unauthParamsJson.Statement[0].Condition;",
                "        let authParams = { PolicyDocument: JSON.stringify(authParamsJson),RoleName: authRoleName};",
                "        let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson),RoleName: unauthRoleName};",
                "        const iam = new aws.IAM({ apiVersion: '2010-05-08', region: event.ResourceProperties.region});",
                "        getPromises.push(iam.getRole({RoleName: authParams.RoleName}).promise());",
                "        getPromises.push(iam.getRole({RoleName: unauthParams.RoleName}).promise());",
                "        Promise.all(getPromises)",
                "         .then((res) => {",
                "        console.log('in res' , res)",
                "           promises.push(iam.updateAssumeRolePolicy(authParams).promise());",
                "           promises.push(iam.updateAssumeRolePolicy(unauthParams).promise());",
                "           return Promise.all(promises)",
                "             .then((res) => {",
                "               console.log(\"delete response data\" + JSON.stringify(res));",
                "               response.send(event, context, response.SUCCESS, {});",
                "             });",
                "          })",
                "           .catch((err) => {",
                "             console.log(err.stack);",
                "             responseData = {Error: err};",
                "             response.send(event, context, response.SUCCESS, responseData);",
                "             })",
                "    }",
                "    if (event.RequestType == 'Update' || event.RequestType == 'Create') {",
                "       const iam = new aws.IAM({ apiVersion: '2010-05-08', region: event.ResourceProperties.region});",
                "        let authParams = { PolicyDocument: JSON.stringify(authParamsJson),RoleName: authRoleName};",
                "        let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson),RoleName: unauthRoleName};",
                "        promises.push(iam.updateAssumeRolePolicy(authParams).promise());",
                "        promises.push(iam.updateAssumeRolePolicy(unauthParams).promise());",
                "        Promise.all(promises)",
                "         .then((res) => {",
                "            console.log(\"createORupdate\" + res);",
                "            console.log(\"response data\" + JSON.stringify(res));",
                "            response.send(event, context, response.SUCCESS, {});",
                "         });",
                "    }",
                "  } catch(err) {",
                "       console.log(err.stack);",
                "       responseData = {Error: err};",
                "       response.send(event, context, response.FAILED, responseData);",
                "       throw err;",
                "  }",
                "};"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Runtime": "nodejs14.x",
        "Timeout": 300,
        "Role": {
          "Fn::GetAtt": [
            "UpdateRolesWithIDPFunctionRole",
            "Arn"
          ]
        }
      }
    },
    "UpdateRolesWithIDPFunctionOutputs": {
      "Type": "Custom::LambdaCallout",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UpdateRolesWithIDPFunction",
            "Arn"
          ]
        },
        "region": {
          "Ref": "AWS::Region"
        },
        "idpId": {
          "Fn::GetAtt": [
            "authvodscotth133eebea",
            "Outputs.IdentityPoolId"
          ]
        },
        "authRoleName": {
          "Ref": "AuthRole"
        },
        "unauthRoleName": {
          "Ref": "UnauthRole"
        }
      }
    },
    "UpdateRolesWithIDPFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AuthRole"
              },
              "-idp"
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "UpdateRolesWithIDPFunctionPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:UpdateAssumeRolePolicy",
                    "iam:GetRole"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "AuthRole",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:UpdateAssumeRolePolicy",
                    "iam:GetRole"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "UnauthRole",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  }
}